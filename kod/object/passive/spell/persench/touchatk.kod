% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
TouchAttackSpell is PersonalEnchantment

% A touch attack spell is essentially a 'combat stroke' enchantment.

constants:

   include blakston.khd

resources:

   TouchAttackSpell_name_rsc = "Touch Spell"
   TouchAttackSpell_icon_rsc = light.bgf
   TouchAttackSpell_desc_rsc = "This is a touch spell that does damage."

   TouchAttack_Succeed_rsc = \
      "You have cast a touch attack on another player.  This is a bug.  "
      "Please report it.  Have a nice day."
   TouchAttack_missed1_sound = swswish1.wav
   TouchAttack_missed2_sound = swswish2.wav
   TouchAttack_missed3_sound = swswish3.wav
   
   TouchAttack_hit_sound = patk.wav

classvars:

   vrName = TouchAttackSpell_name_rsc
   vrIcon = TouchAttackSpell_icon_rsc
   vrDesc = TouchAttackSpell_desc_rsc

   vrMiss_sound = $
   
   vrMissed_message_attacker = $

   vrAlreadyEnchanted = PersonalEnchantment_already_enchanted_rsc
   vrEnchantment_On = PersonalEnchantment_On_rsc
   vrEnchantment_Off = PersonalEnchantment_Off_rsc
   vrSuccess = PersonalEnchantment_Success_rsc
   vrSucceed = TouchAttack_Succeed_rsc

   vrPlayer_hit_something = $
   vrPlayer_was_hit = $
   vrPlayer_killed_something = $
   vrPlayer_was_killed = $

   viIndefinite = ARTICLE_NONE
   viDefinite = ARTICLE_NONE

   viSchool = 0
   viSpell_num = 0
	
	viDamage_factor = 100

   viSpellExertion = 2

	% Chance to increase is one in viChance_To_Increase.
   viChance_To_Increase = 60

   % Standard base damage of all weapons.
   viBase_Damage = 8
	
	% Proc chance of special effects. 100 is default proc rate.
	viSpell_proc_chance = 100

   % Touch spell range can vary, but is typically good.     
   viRange = 2

   % Touch spells are now linked to punch attacks, so make it do punch damage
   %  for default.
   viAttackType = ATCK_WEAP_UNARMED+ATCK_WEAP_PUNCH
   % Touch spells typically DO have a spell type.
   viSpellType = 0          

   viCast_delay = 1000

   % Cannot enchant others with touch attacks.
   vbCanCastOnOthers = FALSE

properties:

   plPrerequisites = $
   plReagents = $
  
messages:

   ImproveStroke(who=$,target=$)
   {
      Send(self,@ImproveAbility,#who=who,#target=target);
      
      return;
   }

   CanPayCosts(who = $, lTargets = $, iSpellPower = 0)
   {
      propagate;
   }

   CastSpell(who = $,iSpellPower=0,lTargets=$)
   {
      % Remove other touch attack spells.  Won't remove self, because
      % we've checked for re-enchantment in CanPayCosts.
      Send(who,@RemoveEnchantmentClass,#class=&TouchAttackSpell);
		
		% Set the player elemental enchantment tothe active touch spell.
		Send(who,@SetTouchSpell,#activetouchspell=self);
      
      propagate;
   }
	
   EndEnchantment(who = $, report = TRUE, state = 0)
   {
		% Set the player elemental enchantment back to nil.
		Send(who,@SetTouchSpell,#activetouchspell=$);
		
      propagate;
   }

   GetNumSpellTargets()
   {
      return 0;
   }

   CheckWeaponAndDoAnimation(who=$,use_weapon=$,victim=$)
   "Spell does not require a weapon, but a player may use this spell even"
   "if they are armed."
   "Also does the cast animation.  In future, may provide different grfx"
   "for different touch spells."
   {
      Send(who,@DoCast);
      
      return TRUE;
   }

   ToHitImprovers(raw_hitroll=0)
   "A weapon stroke may have IMPROVERS, which may boost the performance of "
   "the stroke.  Example, if a player has renweed, that may boost his thrust "
   "Default, return the hitroll raw."
   {
      return Raw_hitroll; 
   }

   %%% This section for combat

   %%% These are the weapon functions

   % What's the stroke number?
   % This here is a pure backup. Different touch attacks use different
   % factors to determine their secondary chance to hit. Check the
   % individual spells for details.
   GetProf(who=$)
   {
		% Just a dummy, actual calculations are handled one level further.      
      return 0;
   }

   GetStroke(who=$)
   {
		local iStroke;
		
		iStroke = Send(who,@GetAbility,#num=viSpell_num);
		
      return iStroke;
   }
	
	GetStrokeNumber()
	{
		return viSpell_num;
	}

   GetAttackType(use_weapon=$)
   {
      return viAttackType;
   }

   GetAttackSpell(use_weapon=$)
   {
      return viSpellType;
   }

   GetParryAbility()
   {
      % Touch attacks have no parrying ability.
      return 0;
   }

   %%% These are the stroke functions

   % Can this touch attack be blocked?
   CanBlock()
   {
      return TRUE;
   }

   % Can this touch attack be parried?
   CanParry()
   {
      return TRUE;
   }

   % Can this touch attack be blocked?
   CanDodge()
   {
      return TRUE;
   }

   % This returns the "weapon" name for combat attacks.
   GetAttackName()
   {
      return vrName;
   }

   GetRange(use_weapon = $)
   "This returns the range of the spell.  Usually, this hovers around 2-3."
   {
      return viRange;
   }

   CheckSpecial(who=$,victim=$)
   "Checks to see if there are any special circumstances which prevents"
   "the target player from performing this spell."
   {
      return TRUE;
   }

   FindDamage(use_weapon=$,who=$,victim=$)
   "Damage for attack spells is determined largely by expertise in the spell."
   {
      local i, damage, iAbility;

      % base weapon damage - coming up with everything here.
      damage = viBase_damage;
		damage = damage*100;
	  
      % scale the basedamage with the stroke, i.e. the spell ability,
      iAbility = Send(who,@GetAbility,#num=viSpell_num);
      damage = damage * iAbility / 100;

      % allow for damage adjustments and procs,
      damage = Send(self,@DamageFactors,#damage=damage,#who=who,#victim=victim);
		
		% and make it do a pretty flash.
		for i in send(who,@GetPlayerUsing)
      {
         if IsClass(i,&SpellStone)
         {
				Send(i,@DoFlash);
         }
      }
		
      return damage;
   }
	
   DamageFactors(damage=0,who=$,victim=$)
    "Here, we handle damage adjustments."
   {
		local iProf, oWeapon;
		
      oWeapon = Send(who,@LookupPlayerWeapon);
		
		if oWeapon <> $
		{
			iProf = send(oWeapon,@GetProf,#who=who);
		}
		else
		{
			iProf = send(self,@GetProf,#who=who);
		}
		
      % scale damage with the proficiency. See the individual touchattack spell for more info.
		damage = damage + damage * iProf / 100;
		
		% allow tuning through the class variable
		damage = damage*viDamage_factor/100;

		% check for possible procs
		Send(self,@DoSpellProc,#damage=damage,#who=who,#victim=victim,#prof=iProf);
		
      return damage;
   }

   PlayerWasHitMsg(who=$,attacker=$,damage=$)
   "The stroke may choose it's own damage give or recieve message.  Otherwise "
   "player.kod will just choose a default - which is true for most weapon-"
   "based combat strokes (but not true for most punch strokes or touch spells."
   {
      if vrPlayer_was_hit = $
      {
         return FALSE;
      }

      Send(who,@MsgSendUser,#message_rsc=vrPlayer_was_hit,
           #parm1=Send(attacker,@GetCapDef),#parm2=Send(attacker,@GetName));
           
      return TRUE;
   }

   PlayerHitSomethingMsg(who=$,victim=$,damage=$,color_rsc=$)
   "The stroke may choose it's own damage give or recieve message.  Otherwise "
   "player.kod will just choose a default - which is true for most weapon-"
   "based combat strokes (but not true for most punch strokes or touch spells."
   {
      if vrPlayer_hit_something = $
      {
         return FALSE;
      }
       
      Send(who,@MsgSendUser,#message_rsc=vrPlayer_hit_something,
           #parm1=color_rsc,#parm2=Send(victim,@GetDef),
           #parm3=Send(victim,@GetName));
          
      return TRUE;
   }

   SendMissMessageToAttacker(who=$,victim=$,color_rsc=$)
   {
      local iRandom, rSound;
      
      % 'miss' sound
      if vrMiss_Sound = $
      {
         % Play a random miss sound.
         iRandom = random(1,3);
         if iRandom = 1
         {
            rSound = TouchAttack_missed1_sound;
         }
         else
         {
            if iRandom = 2
            {
               rSound = TouchAttack_missed2_sound;
            }
            else
            {
               rSound = TouchAttack_missed3_sound;
            }
         }
      }
      else
      {
         rSound = vrMiss_Sound;
      }
      
      Send(Send(who,@GetOwner),@SomethingWaveRoom,#what=who,#wave_rsc=rSound);
      
      % Text messages
      if vrMissed_Message_Attacker <> $
      {
         Send(who,@MsgSendUser,#message_rsc=vrMissed_Message_Attacker,
              #parm1=color_rsc,#parm2=vrName,#parm3=Send(victim,@GetDef),
              #parm4=Send(victim,@GetName));
              
         return TRUE;
      }
      
      return;
   }

   PlayerKilledSomethingMsg(who=$,victim=$,damage=$)
   "The stroke may choose it's own damage give or recieve message.  Otherwise"
   "player.kod will offer the default 'You killed the whatever' message."
   {
       if vrPlayer_killed_Something = $
       {
         return FALSE ;
       }
       
       Send(who,@MsgSendUser,#message_rsc=vrPlayer_killed_something,
            #parm1=Send(victim,@GetCapDef),#parm2=Send(victim,@GetName));
                
       return TRUE;
   }

   PlayerWasKilledMsg(who=$,attacker=$,damage=$)
   "The stroke may choose it's own damage give or recieve message.  Otherwise"
   "player.kod will just choose a default - as it does for most strokes."
   {
       if vrPlayer_was_killed = $
       {
         return FALSE ;
       }
       
       Send(who,@MsgSendUser,#message_rsc=vrPlayer_was_killed,
            #parm1=Send(attacker,@GetDef),#parm2=Send(attacker,@GetName));
            
       return TRUE;
   }

   %%% Enchantment support

   GetDuration(iSpellpower=$)
   {
      local iDuration;

      iDuration = 60;
      % 60 minutes flat
      iDuration = iDuration * 60 * 1000;  

      return iDuration;
   }  

   GetStateValue(iSpellpower=$)
   {
      Return iSpellpower;
   }

   SuccessChance(who=$)
   "Allow mages to switch elements despite antagonistic conditions."
   {
      return TRUE;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
