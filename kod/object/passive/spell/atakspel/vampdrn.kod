% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
VampiricDrain is AttackSpell

constants:

   include blakston.khd

   % How much health does the caster get back?

resources:

   VampiricDrain_name_rsc = "vampiric drain"
   VampiricDrain_icon_rsc = ivamptou.bgf
   VampiricDrain_desc_rsc = \
      "Draws out the very life force of the target and converts the energy into "
      "life for the caster.  Reagents unknown."

   VampiricDrain_already_cast = "You are already tapping %s%s's life force."
   VampiricDrain_health_gain = "You begin draining %s%s's life force for ~k~B%i~B~n health, gradually converting it into ~g~B%i~B~n of your own."
	VampiricDrain_on = "%s%s begins draining your life force for ~r~B%i~B~n health, gradually converting it into ~k~B%i~B~n of his own."
	VampiricDrain_damage_wearing_off = "You take a deep breath and feel great relief as the vampiric link is broken."
	VampiricDrain_heal_wearing_off = "The vampiric link is broken and leaves you yearning for more."

   VampiricDrain_sound = qvtouch.wav

classvars:

   vrName = VampiricDrain_name_rsc
   vrIcon = VampiricDrain_icon_rsc
   vrDesc = VampiricDrain_desc_rsc

   viSchool = SS_QOR
   viSpell_num = SID_VAMPIRIC_DRAIN

   viSpell_level = 3
   viMana = 10
   viSpellExertion = 4

   viAttack_spell = ATCK_SPELL_ALL + ATCK_SPELL_UNHOLY

   vrSucceed_wav = VampiricDrain_sound

   % In seconds, since it works off GetTime().
   viPostCast_time = 1
   
   viChance_To_Increase = 5

properties:

   piRange = 20
	pbAbsolute = TRUE

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = cons([&ShamanBlood, 1],plReagents);
      
      return;
   }
	
   CanPayCosts(who = $, lTargets = $, bItemCast = FALSE)
   {
		local i, oTarget;
		
      oTarget = First(lTargets);
		
		if IsClass(oTarget,&Player)
		{
			for i in send(oTarget,@GetDamageOverTime)
			{
				if First(i) = self AND Nth(i,5) = who
				{
					Send(who,@MsgSendUser,#message_rsc=VampiricDrain_already_cast,#parm1=Send(oTarget,@GetDef),#parm2=Send(oTarget,@GetName));
					return FALSE;
				}
			}	
		}

      propagate;
   }
	
   CastSpell(who = $, lTargets = $, iSpellPower = 0, bItemCast = FALSE)
   {
      local iDamage, iTrueDamage, iTrueHeal, oRoom, oTarget;

      oTarget = First(lTargets);
      oRoom = Send(who,@GetOwner);
		
		iDamage = iSpellpower*30;
		iTrueDamage = iDamage * Send(oTarget,@GetMaxHealth) / 15000;
		iTrueHeal = iDamage * Send(who,@GetMaxHealth) / 15000;

      Send(oTarget,@AddDamageOverTime,#strength=iDamage,#duration=10000,#what=self,#who=who);
		
		if IsClass(oTarget,&Player)
		{
			Send(oTarget,@MsgSendUser,#message_rsc=VampiricDrain_on,#parm1=Send(who,@GetCapDef),#parm2=Send(who,@GetName),#parm3=iTrueDamage,#parm4=iTrueHeal);
		}
		else
		{
			iTrueDamage = iTrueDamage / 2;
			iTrueDamage = Send(oTarget,@AssessDamage,#what=who,#damage=iTrueDamage,#atype=Send(self,@GetAttackType),#aspell=Send(self,@GetAttackSpell),#absolute=pbAbsolute);

			Send(who,@AssessHit,#what=oTarget,#damage=iTrueDamage,#use_weapon=self);

			if iTrueDamage = $
			{
				Send(who,@KilledSomething,#what=oTarget,#use_weapon=self);
			} 
		}
		
		Send(who,@AddHealOverTime,#strength=iDamage,#duration=10000,#what=self,#who=who);
		Send(who,@MsgSendUser,#message_rsc=VampiricDrain_health_gain,#parm1=Send(oTarget,@GetDef),#parm2=Send(oTarget,@GetName),#parm3=iTrueDamage,#parm4=iTrueHeal);
		
      Send(oRoom,@SomethingWaveRoom,#what=who,#wave_rsc=Send(self,@GetSpellSound));
      Send(oRoom,@SpellCast,#who=who,#oSpell=self,#lItems=lTargets);

		Send(who,@SetKillTarget,#target=oTarget);
		Send(who,@SetPlayerFlag,#flag=PFLAG_DID_DAMAGE,#value=TRUE);

		if NOT bItemCast
		{
			% Do the sound, and the third person animation.
			piCast_successes = piCast_successes + 1 ;
			Send(who,@DoCast);      %% window overlay

		}

      Send(oRoom,@SomethingAttacked,#what=who,#victim=oTarget,#use_weapon=self);
		
      if not bItemCast
      {
         Send(self,@ImproveAbility,#who=who,#target=oTarget);
      }

      % DON'T PROPAGATE!  This way, events will be handled in the proper
      %  order.

      return;
   }
	
   DoTWearingOff(who=$,overtimeeffect=$,report=TRUE,delayed=FALSE)
   {
		if report
		{
			send(who,@MsgSendUser,#message_rsc=VampiricDrain_damage_wearing_off);
		}
      
      return;
   }
	
   HoTWearingOff(who=$,overtimeeffect=$,report=TRUE,delayed=FALSE)
   {
		if report
		{
			send(who,@MsgSendUser,#message_rsc=VampiricDrain_heal_wearing_off);
		}
      
      return;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
