% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
IllusionaryWounds is AttackSpell

constants:
   include blakston.khd

resources:

   illusionarywounds_name_rsc = "illusionary decay"
   illusionarywounds_icon_rsc = iilluwou.bgf
   illusionarywounds_desc_rsc = \
      "Causes the victim to see imagined wounds, but imagination "
      "always gives in to one's right mind, assuming one lives so long.  "
      "Requires solagh and firesand."

   illusionarywounds_cast = "You put on a wicked smile as %s%s stares at %s hands and starts shivering uncontrollably. %s is losing ~k~B%i~B~n health."
	illusionarywounds_already_cast = "%s%s is already suffering from illusionary decay."
	illusionarywounds_on = "%s%s smiles and to your horror, you notice your skin beginning to blister and rot, wounds cracking open and bleeding profusely. You are losing ~r~B%i~B~n health."
   illusionarywounds_wearing_off = "Hey!  Some of those wounds were illusionary! You regain ~g~B%i~B~n health."
   illusionarywounds_sound = riija.wav

classvars:

   vrName = illusionarywounds_name_rsc
   vrIcon = illusionarywounds_icon_rsc
   vrDesc = illusionarywounds_desc_rsc

   viSpell_num = SID_ILLUSIONARY_WOUNDS
   viSchool = SS_RIIJA
   viSpell_level = 3
   viMana = 10

   viSpellExertion = 3

   vrSucceed_wav = illusionarywounds_sound

   viHarmful = TRUE
   viOutlaw = TRUE
   viNoNewbieOffense = TRUE
	
   % In seconds, since it works off GetTime().
   viPostCast_time = 1

properties:

   piRange = 20
	pbAbsolute = TRUE

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&Solagh,1],plReagents);
      plReagents = Cons([&FireSand,1],plReagents);

      return;
   }

   CanPayCosts(who = $, lTargets = $, bItemCast = FALSE)
   {
		local i, oTarget;
		
      oTarget = First(lTargets);
		
		if IsClass(oTarget,&Player)
		{
			for i in send(oTarget,@GetDamageOverTime)
			{
				if First(i) = self AND Nth(i,5) = who
				{
					Send(who,@MsgSendUser,#message_rsc=illusionarywounds_already_cast,#parm1=Send(oTarget,@GetDef),#parm2=Send(oTarget,@GetName));
					return FALSE;
				}
			}
		}

      propagate;
   }
	
   CastSpell(who = $, lTargets = $, iSpellPower = 0, bItemCast = FALSE)
   {
      local iDamage, iTrueDamage, iTrueHeal, oRoom, oTarget;

      oTarget = First(lTargets);
      oRoom = Send(who,@GetOwner);
		
		iDamage = iSpellpower * 60;
		iTrueDamage = iDamage * Send(oTarget,@GetMaxHealth) / 15000;

		Send(oTarget,@MsgSendUser,#message_rsc=illusionarywounds_on,#parm1=Send(who,@GetCapDef),#parm2=Send(who,@GetName),#parm3=iTrueDamage);
		
		Send(who,@MsgSendUser,#message_rsc=illusionarywounds_cast,#parm1=Send(oTarget,@GetDef),#parm2=Send(oTarget,@GetName),#parm3=Send(oTarget,@GetHisHer),#parm4=Send(oTarget,@GetHeShe,#cap=TRUE),#parm5=iTrueDamage);
		
      Send(oRoom,@SomethingWaveRoom,#what=who,#wave_rsc=Send(self,@GetSpellSound));
      Send(oRoom,@SpellCast,#who=who,#oSpell=self,#lItems=lTargets);

		Send(who,@SetKillTarget,#target=oTarget);
		Send(who,@SetPlayerFlag,#flag=PFLAG_DID_DAMAGE,#value=TRUE);

		if NOT bItemCast
		{
			% Do the sound, and the third person animation.
			piCast_successes = piCast_successes + 1 ;
			Send(who,@DoCast);      %% window overlay

		}

      Send(oRoom,@SomethingAttacked,#what=who,#victim=oTarget,#use_weapon=self);
		
      if not bItemCast
      {
         Send(self,@ImproveAbility,#who=who,#target=oTarget);
      }

		send(self,@DealIllusionaryDamage,#who=who,#target=oTarget,#damage=iDamage,#duration=10000);
		
      return;
   }
	
	DealIllusionaryDamage(who=$,target=$,damage=0,duration=0,showicon=TRUE)
   {
		send(target,@AddDamageOverTime,#strength=damage,#duration=duration,#what=self,#who=who,#showicon=showicon);
		
      return;
   }
		
	
   DoTWearingOff(who=$,overtimeeffect=$,report=TRUE,delayed=TRUE)
   {
		local iDamage, iDuration;
		
		if delayed
		{
			% Delayed means that it is wearing of regularly. We take the duration and strength of the DoT to see how much health
			% we have lost. We will restore the health once the enchantment has worn off, which will happen after SP * 100 ms.
			iDuration = Nth(overtimeeffect,7)*100;
			
			% Keep the order to avoid hitting the max value for integers, which could happen for long durations and high damage.
			iDamage = Send(who,@GetMaxHealth) * Nth(overtimeeffect,2) / 1000 * (Nth(overtimeeffect,4)) / 150000;
			
			Send(who,@StartEnchantment,#what=self,#time=iDuration,#lastcall=TRUE,#state=iDamage,#addicon=FALSE);
		}
		else
		{
			% Not delayed means that the illusion was weakened or removed one way or another. We take the state the effect 
			% had before it was weakend and restore health immediately, based on the time the illusion has been running and 
			% the strength it had up to this point.
			iDuration = GetTickCount() - Nth(overtimeeffect,3);
			
			send(who,@GainHealthNormal,#amount=iDamage);
			send(who,@MsgSendUser,#message_rsc=illusionarywounds_wearing_off,#parm1=iDamage);
		}
      
      return;
   }
	
	
   EndEnchantment(who=$,state=$,report=TRUE)
   {
      post(self,@EndEnchantmentEffects,#who=who,#state=state,#report=report);

      return;
   }

   EndEnchantmentEffects(who=$, state=$, report = TRUE)
   {
      if (Send(who,@GetHealth) > 0)
      {
         Send(who,@GainHealthNormal,#amount=state);
			
         if IsClass(who,&Player) 
         {
				send(who,@MsgSendUser,#message_rsc=illusionarywounds_wearing_off,#parm1=state);
         }
      }
      
      return;
   } 


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
