% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
CureDisease is Spell

constants:

   include blakston.khd

   % How many points do we get down to before we just remove the damn thing?
   %  This is to avoid the "any fraction of 1 is 0" integer division problem when
   %  we don't fully remove the disease.
   MAX_PENALTY_TO_ELIMINATE = 2

resources:

   curedisease_name_rsc = "cure disease"
   curedisease_icon_rsc = icuredis.bgf
   curedisease_desc_rsc = \
     "Pure, healing energy purges disease from the target.  "
	  "Requires herbs and elderberries to cast."
   
   curedisease_on = "The power of Shal'ille burns the disease from your body."
   curedisease_abates = "You feel the disease grow weaker."
   
classvars:

   vrName = curedisease_name_rsc
   vrIcon = curedisease_icon_rsc
   vrDesc = curedisease_desc_rsc

   viSpell_num = SID_CURE_DISEASE
   viSchool = SS_SHALILLE
   viMana = 9
   viSpell_level = 3

   viChance_To_Increase = 40

   viFlash = FLASH_GOOD

properties:

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&Herbs,3],plReagents);
      plReagents = Cons([&ElderBerry,2],plReagents);

      return;
   }

   GetNumSpellTargets()
   {
      return 1;
   }
	
   CanPayCosts(who = $, lTargets = $)
   {
      local target, i;
      
      % Can cast spell if the 1 target item is a user
      if Length(lTargets) <> 1
      {
         return FALSE;
      }

      target = First(lTargets);
		
      if not IsClass(target, &User) or not send(target,@IsEnchanted,#byClass=&Disease)
      {
         Send(who, @MsgSendUser, #message_rsc=spell_bad_target,#parm1=vrName,#parm2=Send(target,@GetDef),#parm3=Send(target,@GetName));
			
         return FALSE;
      }

      propagate;   % Check other things higher up
   }

   CastSpell(who = $, lTargets = $, iSpellPower = 0)
   {
      local oTarget, lInfo, oSpell, lList, lEnchantmentList;

      oTarget = First(lTargets);
		
      if oTarget <> who
      {
         Send(who,@MsgSendUser,#message_rsc=spell_cast_on_target,#parm1=Send(self,@GetName),#parm2=Send(oTarget,@GetDef),#parm3=Send(oTarget,@GetName));
      }
      
      Send(oTarget,@MsgSendUser,#message_rsc=curedisease_on);

      % keep tabs on guides/bards, but not admins.
      if IsClass(who, &DM)
      {
         if GetClass(who) = &DM
            AND who <> oTarget
         {
            debug(send(who,@GetTrueName)," cast cure disease on ",send(oTarget,@GetName));
         }

         if send(who,@PlayerIsImmortal)
         {
            % If they're immortal, let them clear everything.
            iSpellPower = $;
         }
      }

      send(self,@RemoveDiseases,#who=oTarget,#spellpower=iSpellPower);

      propagate;
   }

   RemoveDiseases(who=$, spellpower=$)
   "If DM cast, removes all Diseases. If player cast, removes up to 50 points from the disease's SP and duration."
   {
		local i, lEnchantments, oTimer, iTime, oSpell, iState, iNewState, bRemovedSomething;

		if who = $
      {
         return FALSE;
      }
		
		bRemovedSomething = FALSE;

      lEnchantments = send(who,@GetEnchantmentList);

      % Chance of $ means that we want to remove it all.
      if spellpower = $
      {

			for i in lEnchantments
			{
				oSpell = Nth(i,2);
				
				if IsClass(oSpell,&Disease)
				{
					Send(who,@RemoveEnchantment,#what=oSpell,#report=TRUE);
					bRemovedSomething = TRUE;
				}
			}
		
         return bRemovedSomething;
      }

		for i in lEnchantments
		{
			oSpell = Nth(i,2);

			if IsClass(oSpell,&Disease)
			{				
				% Get the current state of the enchantment.
				oTimer = Nth(i,1);
				iTime = GetTimeRemaining(oTimer);
				iState = Nth(i,3);
				
				% Calculate the new state and time of the enchantment.
				iNewState = iState - spellpower;
				iTime = iTime * iNewState / iState;
				
				% Start the new enchantment with the time left and the new state,
				% but only if iNewState is greater than 0.
				if iNewState > 0
				{
					% Remove the current enchantment, but don't report.
					Send(who,@RemoveEnchantment,#what=oSpell,#report=FALSE);
					% Extra effects like added stat points are handled in GetStateValue, so we have to call it here.
					Send(oSpell,@GetStateValue,#who=who,#iSpellPower=iNewState,#target=who);
					Send(who,@StartEnchantment,#what=oSpell,#state=iNewState,#time=iTime,#lastcall=TRUE,#addicon=TRUE);
				}
				else
				{
					% Remove the current enchantment and report.
					Send(who,@RemoveEnchantment,#what=oSpell,#report=TRUE);
					bRemovedSomething = TRUE;
				}
			}
		}
		
      return bRemovedSomething;
   }

   GetPotionClass()
   {
      RETURN &CureDiseasePotion;
   }

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
