% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
WallofFire is ActiveWallElement

constants:

   include blakston.khd

resources:

   WallofFire_name_rsc = "wall of fire"
   WallofFire_icon_rsc = woflame.bgf
   WallofFire_desc_rsc = \
      "The wall of fire flickers dangerously, threatening to make the day "
      "of anyone passing through a bad one."

   firewall_damage0 = "You withstand the fire unscathed."
   firewall_damage5 = "You feel a bit toasted from the flames."
   firewall_damage10 = "Something smells like burnt hair.  Wait, it's you!"
   firewall_damage15 = "You are on fire!  Put it out!"
   firewall_damage20 = "Ouch, that really burned!"

   firewall_burn_snd = frying.wav

   firewall_dissipates = "A bit of the firewall fades into coldness."

classvars:

   vrName = WallofFire_name_rsc
   vrIcon = WallofFire_icon_rsc
   vrdesc = WallofFire_desc_rsc

   viObject_flags = LOOK_NO | DRAWFX_TRANSLUCENT_50 | MOVEON_NOTIFY | FLICKERING_YES

   vrDissipateMessage = firewall_dissipates
   vrUnaffectedMessage = firewall_damage0

   viLightBonus = 15

properties:

   viIllusion = FALSE
   piMaxDamage = 0

messages:

   Constructor(caster = $, duration = 75, MaxDamage = 0, illusionary = FALSE)
   {
      % MaxDamage needs to be converted to damage per tick.
		piMaxDamage = MaxDamage * 1000;
		viIllusion = illusionary;

      propagate;
   }

   GetDuration(duration = 0)
   {
      local iDuration;

      iDuration = Random(duration-20,duration+20);
      iDuration = iDuration * 1000;
      iDuration = bound(iDuration,30000,200000);

      return iDuration;
   }

   DoEffect(what = $)
   {
      local i, iDamage, iResistance, oSpell, rMessage;

      iDamage = random(0,piMaxDamage);
		
		iResistance = Send(what,@ResistanceCheck,#atype=0,#aspell=ATCK_SPELL_ALL+ATCK_SPELL_FIRE);

		for i in send(what,@GetRadiusEnchantments)
		{
			iResistance = Send(Nth(i,1),@ModifyResistance,#attacker=what,#atype=ATCK_SPELL_ALL+ATCK_SPELL_FIRE,#iPower=Nth(i,2),#caster=Nth(i,3),#resistance=iResistance);
		}
		
		iDamage = bound(Send(what,@GetDamageFromResistance,#what=iDamage,#value=iResistance),0,$);
      
		if iDamage > 0
		{
			if viIllusion
			{
				oSpell = Send(SYS,@FindSpellByNum,#num=SID_ILLUSIONARY_WOUNDS);

				% Since the damage is dealt over two seconds, we only deal half of the total damage per tick.
				send(oSpell,@DealIllusionaryDamage,#who=poCaster,#target=what,#damage=iDamage/2,#duration=2000,#showicon=FALSE);
			}
			else
			{
				oSpell = Send(SYS,@FindSpellByNum,#num=SID_FIREWALL);
				
				% Since the damage is dealt over two seconds, we only deal half of the total damage per tick.
				send(what,@AddDamageOverTime,#strength=iDamage/2,#duration=2000,#what=oSpell,#who=poCaster,#showicon=FALSE);
			}
		}

      if IsClass(what,&Player)
      {
         if iDamage = 0
         {
            rMessage = firewall_damage0;
         }
         else
         {
            % Damage is greater than 0
            Send(what,@WaveSendUser,#wave_rsc=firewall_burn_snd);

            if iDamage < 5000
            {
               rMessage = firewall_damage5;
            }
            else
            {
               if iDamage < 10000
               {
                  rMessage = firewall_damage10;
               }
               else
               {
                  if iDamage < 15000
                  {
                     rMessage = firewall_damage15;
                  }
                  else
                  {
                     rMessage = firewall_damage20;
                  }
               }
            }
         }

         Send(what,@MsgSendUser,#message_rsc=rMessage);
      }
      
      propagate;
   }

   SendAnimation()
   {
      AddPacket(1,ANIMATE_CYCLE, 4,random(100,140), 2,1, 2,5);
      
      return;
   }

   NewOwner(what = $)
   {
      % Add a bit of light if this isn't an illusion.  Firewalls should add some light.
      if NOT viIllusion
      {
         % new room
         if what <> $
         {
            Send(what,@AddBaseLight,#amount=viLightBonus);
         }
   
         % old room
         if poOwner <> $
         {
            Send(poOwner,@AddBaseLight,#amount=-viLightBonus);
         }
      }
      
      propagate;
   }

   Delete()
   {
      % Take away the light we added if we weren't an illusion.
      if NOT viIllusion
      {
         if poOwner <> $
         {
            Send(poOwner,@AddBaseLight,#amount=-viLightBonus);
         }
      }
      
      propagate;
   }

   SendLightingInformation()
   {
      AddPacket(2,(LIGHT_FLAG_ON | LIGHT_FLAG_DYNAMIC));
      % Intensity
      if viIllusion
      {
         % Send less light if we're illusionary.
         AddPacket(1,0);
      }
      else
      {
         % 5 out of 255 intensity of light
         AddPacket(1,5);
      }

      % Red color
      AddPacket(2,LIGHT_RED);

      return;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
